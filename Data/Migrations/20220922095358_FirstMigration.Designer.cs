// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using hometask.Data;

#nullable disable

namespace hometask.Data.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20220922095358_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("hometask.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserAddress = "Tel Aviv",
                            UserId = "1eeaa53b-267d-4a7d-8e92-895f473d0080"
                        },
                        new
                        {
                            Id = 2,
                            UserAddress = "Haifa",
                            UserId = "75f158fd-dcbf-49d9-9246-8728ab3482df"
                        },
                        new
                        {
                            Id = 3,
                            UserAddress = "Ashdod",
                            UserId = "a69a4c52-92cd-46dc-bf0d-9d0a24ef7a1a"
                        },
                        new
                        {
                            Id = 4,
                            UserAddress = "Tel Aviv",
                            UserId = "afacb024-b2a8-48ee-bb82-55560822f503"
                        },
                        new
                        {
                            Id = 5,
                            UserAddress = "Ramat Gan",
                            UserId = "ba5a2b1a-efca-40d9-8b83-e891ece0d845"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1eeaa53b-267d-4a7d-8e92-895f473d0080",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4143310b-ee45-46b6-9138-6784034e82ab",
                            Email = "coral@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "CORAL@GMAIL.COM",
                            NormalizedUserName = "CORAL",
                            PasswordHash = "AQAAAAEAACcQAAAAEOvVGcYLOmgONCBu0yI1Fegt43TPpNcAVcfpBkWV2cZ9Mhwji9ZenaWKLdTjY7Ufow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa717ac1-eeb1-4d9b-a1ab-bfa8b8724aca",
                            TwoFactorEnabled = false,
                            UserName = "coral"
                        },
                        new
                        {
                            Id = "75f158fd-dcbf-49d9-9246-8728ab3482df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f038ac3d-ce8e-48d3-b6fd-ffa93b839d92",
                            Email = "rinat@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "RINAT@GMAIL.COM",
                            NormalizedUserName = "RINAT",
                            PasswordHash = "AQAAAAEAACcQAAAAELcVzguaQ23i1UnIkfEn6ZH5wcKEy0yk3uSaH8evJreHCe69OLPxFAg14S1DqKxbkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f2f3963-cf9e-4a1b-808d-d8a23fb51895",
                            TwoFactorEnabled = false,
                            UserName = "rinat"
                        },
                        new
                        {
                            Id = "a69a4c52-92cd-46dc-bf0d-9d0a24ef7a1a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3310db7-5e99-42b8-8575-400d5d72a434",
                            Email = "bar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "BAR@GMAIL.COM",
                            NormalizedUserName = "BAR",
                            PasswordHash = "AQAAAAEAACcQAAAAEKNCotzBUp9Qu2OImkBf06ipUrRbNV5DiJAHRjPQuNuTI6i4/IP1haO4BVuMYTVJ9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "99573440-6b54-4760-9044-79a798e8ad9a",
                            TwoFactorEnabled = false,
                            UserName = "bar"
                        },
                        new
                        {
                            Id = "afacb024-b2a8-48ee-bb82-55560822f503",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76cd125b-0669-4602-ad19-e38137170743",
                            Email = "adir@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADIR@GMAIL.COM",
                            NormalizedUserName = "ADIR",
                            PasswordHash = "AQAAAAEAACcQAAAAEDT5phQdgqMDtYJm2YAkMQwkBGvl70w7E2VhrqV6QWZacKZLW9lOB2KmRKg+o9Z0eQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b9ca508-758e-46d1-9035-6d4ea679f715",
                            TwoFactorEnabled = false,
                            UserName = "adir"
                        },
                        new
                        {
                            Id = "ba5a2b1a-efca-40d9-8b83-e891ece0d845",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d89f7ca-f349-4c6f-9110-d729193b301c",
                            Email = "amit@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "AMIT@GMAIL.COM",
                            NormalizedUserName = "AMIT",
                            PasswordHash = "AQAAAAEAACcQAAAAEJYxzilZd7mh7O5ioXfRY0uZk8/nViwWEUyDJ05/dkdaxyWri4uEYvq4P+ZMBbNLFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0f11539-0cb1-435d-9606-938340eb1fa9",
                            TwoFactorEnabled = false,
                            UserName = "amit"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
