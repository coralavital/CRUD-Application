// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using hometask.Data;

#nullable disable

namespace hometask.Data.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20220924175628_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("hometask.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserAddress = "Tel Aviv",
                            UserId = "4e492d27-6e67-4125-a003-4c6869f9d002"
                        },
                        new
                        {
                            Id = 2,
                            UserAddress = "Haifa",
                            UserId = "246475f6-52fe-4e5e-844f-148abe1469db"
                        },
                        new
                        {
                            Id = 3,
                            UserAddress = "Ashdod",
                            UserId = "d14bad1f-3d13-4323-8fc5-757ad491b1fd"
                        },
                        new
                        {
                            Id = 4,
                            UserAddress = "Tel Aviv",
                            UserId = "4ad889fd-426d-4507-9f7b-cee94e347b80"
                        },
                        new
                        {
                            Id = 5,
                            UserAddress = "Ramat Gan",
                            UserId = "2da2b428-bc36-49e9-b532-2d6f5bbbf72d"
                        },
                        new
                        {
                            Id = 6,
                            UserAddress = "Tel Aviv",
                            UserId = "c8de0e79-cee5-43aa-8bef-3deb75895f33"
                        },
                        new
                        {
                            Id = 7,
                            UserAddress = "Haifa",
                            UserId = "8135b464-55d7-4121-82cb-716e7ef12204"
                        },
                        new
                        {
                            Id = 8,
                            UserAddress = "Ashdod",
                            UserId = "66b2e64b-94ae-4ee6-bc04-5da919b0e02b"
                        },
                        new
                        {
                            Id = 9,
                            UserAddress = "Tel Aviv",
                            UserId = "55d2df88-b2d8-4817-b6f2-71aabf528215"
                        },
                        new
                        {
                            Id = 10,
                            UserAddress = "Ramat Gan",
                            UserId = "caad0356-1e37-4c7f-b320-7254ee074f02"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4e492d27-6e67-4125-a003-4c6869f9d002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9137042-732a-4e4a-b55c-f9468198c181",
                            Email = "coral@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "CORAL@GMAIL.COM",
                            NormalizedUserName = "CORAL AVITAL",
                            PasswordHash = "AQAAAAEAACcQAAAAEN408GU5lB6NOq+nEZich1kSr8hHooCRsijSmceGKOcjQwuykNR20H9KmhyBo1bKkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a4ffb620-3cd8-4fd0-a732-bcaf8d2f4c8b",
                            TwoFactorEnabled = false,
                            UserName = "Coral Avital"
                        },
                        new
                        {
                            Id = "246475f6-52fe-4e5e-844f-148abe1469db",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af952e07-119e-449d-99c9-4d6cd45fc454",
                            Email = "rinat@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "RINAT@GMAIL.COM",
                            NormalizedUserName = "RINAT ATIAS",
                            PasswordHash = "AQAAAAEAACcQAAAAELh+9IQXeHWOXxjHye3GDk9atqka+cDmjLCY8V/MQ/+7Yxy8JsD2GCntbcYUiTC1tw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e29af502-9131-4626-9fa0-1c1f1c7f7258",
                            TwoFactorEnabled = false,
                            UserName = "Rinat Atias"
                        },
                        new
                        {
                            Id = "d14bad1f-3d13-4323-8fc5-757ad491b1fd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05ce7d9e-cb58-4bd1-8d96-60de1a990ec8",
                            Email = "bar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "BAR@GMAIL.COM",
                            NormalizedUserName = "BAR AVITAL",
                            PasswordHash = "AQAAAAEAACcQAAAAEFd10jPVNzUNj9rztjHNK1somnyIwdlSWKbMaG0acEWFFHG6tuNPt1gYVU9JquTHHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d43ae57-0fc8-430a-85aa-19128200643a",
                            TwoFactorEnabled = false,
                            UserName = "Bar Avital"
                        },
                        new
                        {
                            Id = "4ad889fd-426d-4507-9f7b-cee94e347b80",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea064713-ce31-477c-a083-e2e393f590f5",
                            Email = "adir@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADIR@GMAIL.COM",
                            NormalizedUserName = "ADIR ALFASI",
                            PasswordHash = "AQAAAAEAACcQAAAAEC27UsOYM8I8NtUZ1L9oDv52wUfPCMaLe4bxX16UwjJMGIiN40lC99wQDwRsxC2dGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98050e26-fc3d-4a48-9870-8562070e9cbc",
                            TwoFactorEnabled = false,
                            UserName = "Adir Alfasi"
                        },
                        new
                        {
                            Id = "2da2b428-bc36-49e9-b532-2d6f5bbbf72d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b120beda-704b-42cb-9bad-beb634ef66cf",
                            Email = "amit@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "AMIT@GMAIL.COM",
                            NormalizedUserName = "AMIT AVITAL",
                            PasswordHash = "AQAAAAEAACcQAAAAEKOHL6qFUC3ahzhk6VeaK5DkAkgXFoGVgHXywwApjyrJ84krBgVmIdDGZ+FOql3h0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d0e29a0-7f48-4765-a6ca-fc6f22b0054d",
                            TwoFactorEnabled = false,
                            UserName = "Amit Avital"
                        },
                        new
                        {
                            Id = "c8de0e79-cee5-43aa-8bef-3deb75895f33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44216919-161f-4bd8-8d9c-d855f9f33b05",
                            Email = "tali@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "TALI@GMAIL.COM",
                            NormalizedUserName = "TALI LEVI",
                            PasswordHash = "AQAAAAEAACcQAAAAEIFL5XFeFAhemVR1cI9zkbbZn1U2EBrM0modPQrtzVMLvVY+7iR8FWj3DzN6RvcoqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe0cbc71-869c-41ab-8ece-ccd7eb3444fd",
                            TwoFactorEnabled = false,
                            UserName = "Tali Levi"
                        },
                        new
                        {
                            Id = "8135b464-55d7-4121-82cb-716e7ef12204",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7543d889-d517-4663-a8ae-d96e422fa302",
                            Email = "tami@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "TAMI@GMAIL.COM",
                            NormalizedUserName = "TAMI VANUNU",
                            PasswordHash = "AQAAAAEAACcQAAAAEMEGSLC+GMt7G5tOsG0RfosWxjUDcsMJrw52PoIExCsl02tonOLKT25ZyYoNjUZNDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f229258d-c52d-4722-8672-ec094359cdb0",
                            TwoFactorEnabled = false,
                            UserName = "Tami Vanunu"
                        },
                        new
                        {
                            Id = "66b2e64b-94ae-4ee6-bc04-5da919b0e02b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8fc51ddd-850f-4abc-9830-149fe9f203ac",
                            Email = "eli@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ELI@GMAIL.COM",
                            NormalizedUserName = "ELI DAHAN",
                            PasswordHash = "AQAAAAEAACcQAAAAEM0XI0tyI2akfdEKBwl4IzqIxw6zaFb3NBo2HOSE24HsaiJff3TUydF6nZMeiWDFNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5b840b4-6894-438e-b7f7-0224ed96bbfe",
                            TwoFactorEnabled = false,
                            UserName = "Eli Dahan"
                        },
                        new
                        {
                            Id = "55d2df88-b2d8-4817-b6f2-71aabf528215",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b6b8cc1f-b4cc-42c9-9c33-6766a27cc200",
                            Email = "iris@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "IRIS@GMAIL.COM",
                            NormalizedUserName = "IRIS AVITAL",
                            PasswordHash = "AQAAAAEAACcQAAAAEC7jYGdrRYVNXHREs4oZXBGvXaNZoKd/FT9dDqeMv0ETWPjWY3AWszasPmIhwxOEVQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "872d83a8-5601-479d-9975-784bb8cfa9fe",
                            TwoFactorEnabled = false,
                            UserName = "Iris Avital"
                        },
                        new
                        {
                            Id = "caad0356-1e37-4c7f-b320-7254ee074f02",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "430d802b-26f6-423b-a309-ba59891eaa6d",
                            Email = "shir@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "SHIR@GMAIL.COM",
                            NormalizedUserName = "SHIR LEVI",
                            PasswordHash = "AQAAAAEAACcQAAAAECY9w3HGMyqO9hNcLqRytLYETlSabDyFVCB2tpma4EizKIJhBwZicH2pc3L4+Bqjzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4fd26653-3f08-4e54-9ec0-ed136b05197f",
                            TwoFactorEnabled = false,
                            UserName = "Shir Levi"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
